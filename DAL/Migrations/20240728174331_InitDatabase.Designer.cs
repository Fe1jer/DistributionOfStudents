// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240728174331_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfApplication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupOfSpecialtiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOutOfCompetition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTargeted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithoutEntranceExams")
                        .HasColumnType("bit");

                    b.Property<string>("PassportID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassportNumber")
                        .HasColumnType("int");

                    b.Property<string>("PassportSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupOfSpecialtiesId");

                    b.HasIndex("StudentId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("DAL.Entities.EnrolledStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecruitmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentPlanId");

                    b.HasIndex("StudentId");

                    b.ToTable("EnrolledStudents");
                });

            modelBuilder.Entity("DAL.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DAL.Entities.FormOfEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBudget")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDailyForm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormsOfEducation");
                });

            modelBuilder.Entity("DAL.Entities.GroupOfSpecialities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormOfEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormOfEducationId");

                    b.ToTable("GroupsOfSpecialties");
                });

            modelBuilder.Entity("DAL.Entities.GroupOfSpecialitiesStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfAdmissions")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupOfSpecialtiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupOfSpecialtiesId");

                    b.ToTable("GroupsOfSpecialitiesStatistic");
                });

            modelBuilder.Entity("DAL.Entities.RecruitmentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("FormOfEducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<int>("TargetPassingScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormOfEducationId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("RecruitmentPlans");
                });

            modelBuilder.Entity("DAL.Entities.RecruitmentPlanStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecruitmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentPlanId");

                    b.ToTable("RecruitmentPlansStatistic");
                });

            modelBuilder.Entity("DAL.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("DAL.Entities.SpecialityPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("RecruitmentPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("RecruitmentPlanId");

                    b.ToTable("SpecialtyPriorities");
                });

            modelBuilder.Entity("DAL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GPA")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DAL.Entities.StudentScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentScores");
                });

            modelBuilder.Entity("DAL.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupOfSpecialitiesSpeciality", b =>
                {
                    b.Property<Guid>("GroupsOfSpecialtiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsOfSpecialtiesId", "SpecialitiesId");

                    b.HasIndex("SpecialitiesId");

                    b.ToTable("GroupOfSpecialitiesSpeciality");
                });

            modelBuilder.Entity("GroupOfSpecialitiesSubject", b =>
                {
                    b.Property<Guid>("GroupsOfSpecialtiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsOfSpecialtiesId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("GroupOfSpecialitiesSubject");
                });

            modelBuilder.Entity("DAL.Entities.Admission", b =>
                {
                    b.HasOne("DAL.Entities.GroupOfSpecialities", "GroupOfSpecialties")
                        .WithMany("Admissions")
                        .HasForeignKey("GroupOfSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Student", "Student")
                        .WithMany("Admissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupOfSpecialties");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Entities.EnrolledStudent", b =>
                {
                    b.HasOne("DAL.Entities.RecruitmentPlan", null)
                        .WithMany("EnrolledStudents")
                        .HasForeignKey("RecruitmentPlanId");

                    b.HasOne("DAL.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Entities.GroupOfSpecialities", b =>
                {
                    b.HasOne("DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany()
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormOfEducation");
                });

            modelBuilder.Entity("DAL.Entities.GroupOfSpecialitiesStatistic", b =>
                {
                    b.HasOne("DAL.Entities.GroupOfSpecialities", "GroupOfSpecialties")
                        .WithMany()
                        .HasForeignKey("GroupOfSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupOfSpecialties");
                });

            modelBuilder.Entity("DAL.Entities.RecruitmentPlan", b =>
                {
                    b.HasOne("DAL.Entities.FormOfEducation", "FormOfEducation")
                        .WithMany()
                        .HasForeignKey("FormOfEducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Speciality", "Speciality")
                        .WithMany("RecruitmentPlans")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormOfEducation");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("DAL.Entities.RecruitmentPlanStatistic", b =>
                {
                    b.HasOne("DAL.Entities.RecruitmentPlan", "RecruitmentPlan")
                        .WithMany()
                        .HasForeignKey("RecruitmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentPlan");
                });

            modelBuilder.Entity("DAL.Entities.Speciality", b =>
                {
                    b.HasOne("DAL.Entities.Faculty", "Faculty")
                        .WithMany("Specialities")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("DAL.Entities.SpecialityPriority", b =>
                {
                    b.HasOne("DAL.Entities.Admission", null)
                        .WithMany("SpecialityPriorities")
                        .HasForeignKey("AdmissionId");

                    b.HasOne("DAL.Entities.RecruitmentPlan", "RecruitmentPlan")
                        .WithMany()
                        .HasForeignKey("RecruitmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruitmentPlan");
                });

            modelBuilder.Entity("DAL.Entities.StudentScore", b =>
                {
                    b.HasOne("DAL.Entities.Admission", null)
                        .WithMany("StudentScores")
                        .HasForeignKey("AdmissionId");

                    b.HasOne("DAL.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("GroupOfSpecialitiesSpeciality", b =>
                {
                    b.HasOne("DAL.Entities.GroupOfSpecialities", null)
                        .WithMany()
                        .HasForeignKey("GroupsOfSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupOfSpecialitiesSubject", b =>
                {
                    b.HasOne("DAL.Entities.GroupOfSpecialities", null)
                        .WithMany()
                        .HasForeignKey("GroupsOfSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Admission", b =>
                {
                    b.Navigation("SpecialityPriorities");

                    b.Navigation("StudentScores");
                });

            modelBuilder.Entity("DAL.Entities.Faculty", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("DAL.Entities.GroupOfSpecialities", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("DAL.Entities.RecruitmentPlan", b =>
                {
                    b.Navigation("EnrolledStudents");
                });

            modelBuilder.Entity("DAL.Entities.Speciality", b =>
                {
                    b.Navigation("RecruitmentPlans");
                });

            modelBuilder.Entity("DAL.Entities.Student", b =>
                {
                    b.Navigation("Admissions");
                });
#pragma warning restore 612, 618
        }
    }
}
